# JavaScript词法

## 对词法初步的了解

+ JavaScript字符区分大小写

+ JavaScript词法构成有 token 空白符 行终结符。其中空格符除了空格之外，还支持制表符、以及Unicode中的所有空白的字符。行终结符包括

+ JavaScrript中的标识符就是一个名字，可以命名常量，变量，函数，方法，类，标记（label）。标识符不能以数字开头，其中可以包含数字，字母，_，$。不以数字开头主要是因为解析器会将所有以数字开头的字符都解析成数字。同时由于某些标识符本身而使用，因此JavaScript提出了一些保留字，这些保留字不能用作寻常的标识符来使用。另外有一些字符在某些特定场所具有特殊意义 `of` `from` `get` `set` `target` 这些字符的使用就是上下文的相关语法，在不同的语句中会产生不同的意义

+ JavaScript字符集支持全部Unicode字符，但是为了兼容性尽量使用ASCII中的字符。由于某些计算机对于Unicode的输入和输出无法正确处理，因此JavaScript提供了使用ASCII部分的字符来转义所有Unicode字符。ASCII转义符通常是 `\u` 后接一个16进制的四位数，但随着Unicode字符集不断扩充部分字符的码点已经超过了四位数，所以在ES6中补充了新的表示转义符的方式，通过 `{}` 中间可以输入多位字母和数字的组合来表示一个转义符。同时，由于在ASCII之外的一些Unicode支持多种写法表示同一个字符，在使用超出ASCII字符的Unicode需要注意统一字符的写法。

+ JavaScript允许添加分号和不添加分号两种风格。JavaScript的词法解析会尽可能讲多的字符解析成一个语句，所以并不会在每一个行终结符后面都自动补全分号，只有在不添加分号无法解析的情况下才补全分号。这样也造成了一些问题，有些情况下解析器的意图和代码本身的表达意图出现分歧就会出现一些报错的问题。当以`(` `[` `-` `+`开头时，如果上一个语句没有添加分号，解析器会优先与前一部分代码相结合。因此在使用无分号风格编程时，需要在以上这几种情况下添加防御分号，也就是在这几句代码前手动添加分号。

```js
;(function() {})()

var a = 1
;++a

;[].toString()

```